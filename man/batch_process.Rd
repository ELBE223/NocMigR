% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batch_process.R
\name{batch_process}
\alias{batch_process}
\title{Main function to run all steps on a folder of sound files}
\usage{
batch_process(
  path = NULL,
  format = c("WAV", "wav", "mp3", "MP3"),
  steps = 1:6,
  rename = FALSE,
  segment = NULL,
  mono = TRUE,
  downsample = NULL,
  rescale = NULL,
  SNR = 8,
  buffer = 1,
  max.events = 999,
  target = td_presets("Bubo bubo"),
  recorder = c("AudioMoth", "Olympus LS-3", "Sony PCM-D100"),
  time = c("ctime", "mtime"),
  .onsplit = TRUE
)
}
\arguments{
\item{path}{Path to a set of recordings (all same format and continuous time span). Important note: File are expected to be named using a YYYYMMDD_HHMMSS string or set \code{reaname = TRUE} to allow renaming. Files including the extensions "_extracted.WAV" or "merged_events.WAV" are reserved to write output files and ignored as inputs.}

\item{format}{Format of sound files (default and suggested is to use WAV).}

\item{steps}{Numeric or character vector, by default steps 1:5 are executed. (1 = \code{\link{rename_recording}}, 2 = \code{\link{split_wave}}, 3 = \code{\link{find_events}}, 4 = \code{\link{join_audacity}} & 5 = \code{\link{extract_events}}).}

\item{rename}{Logical, allows to rename recordings (default FALSE).}

\item{segment}{Null, or numeric value giving segment size for \code{\link{split_wave}} in seconds. (default NULL)}

\item{mono}{Logical. By default, \code{\link{split_wave}} coerces stereo files to mono prior to event detection (default TRUE). If kept as stereo file the left channel will used in \code{\link{find_events}}.}

\item{downsample}{Null or re-sampling factor used in \code{\link{split_wave}} (default NULL).}

\item{rescale}{optional. allows to resacale the wav to a new bit rate (e.g., "8", "16", "24").}

\item{SNR}{Numeric value (dB)  specifying signal to noise ratio for \code{\link{find_events}} (default 8).}

\item{buffer}{Buffer in seconds added to before and after the event (default 1). Controls also the detection of overlapping events.}

\item{max.events}{Numeric, giving the maximum number of events before a file is skipped (default 999). Usually very high detection rates indicate an issue with noise (e.g., wind or rain).}

\item{target}{data frame specifying parameter values used by \code{\link[bioacoustics]{threshold_detection}} to detect events. Values are parsed on as they are. Default is a call to \code{\link{td_presets}}.}

\item{recorder}{Currently three templates to ensure correct handling of times. \bold{Only relevant if \code{rename = TRUE}!}.}

\item{time}{Controls, if ctime or mtime is used to compute date_time objects. \bold{Only relevant if \code{rename = TRUE}!}}

\item{.onsplit}{Logical. by default searches for sub folder split and bases analyses on segmented files if found. Also switched to TRUE if segment is not NULL.}
}
\value{
Data frame with extracted events if \code{\link{extract_events}} was queried.
}
\description{
Main function of the package `NocMigR` that allows to analyse a suite of long-term recordings from scratch by executing five distinct steps (see `details` section.).*Under the hood*, this function is calling algorithms of the fabulous R packages \pkg{tuneR}, \pkg{warbleR}, \pkg{seewave} and \pkg{bioacoustics}.
**Important note**:
Especially for large sets of recordings (e.g., `AudioMoth` deployed for a weak, ~ 60 GB data) R can easily run into memory issues. This can surely be tackled by coding functions more efficiently. For now, the best way to handle this issue is to resume the script after it broke (see output in the console and check \code{steps} argument).
}
\details{
By default, runs all steps (currently five, see \code{steps}) of the analysis workflow consecutively. Recordings of a project (i.e., usually continuous signal or time-expanded if otherwise) need to be saved to a single directory, specified as \code{path} argument:

\bold{1.) If steps = 1 or 'rename_audio':}
Attempts to rename audio files to YYYYMMDD_HHMMSS format, where the date and time at the onset of the recording are coded in the file name. This steps ensures that all downstream algorithms can compute the correct dates and times of events. If files are already formatted correctly (e.g, capture by AudioMoth) this steps can be skipped (default behaviour) by either setting \code{rename = FALSE} and/or excluding '1' from \code{steps}. Internally, calls the function \code{\link{rename_recording}}.

\bold{2.) If steps = 2 or 'split_wave':}
Attempts to split large audio files in chunks controlled by \code{segment} to reduce the file size prior to calling event detection algorithms. Within the parent folder (\code{path}) a sub folder "split" is created to dump the files. Each file is named with the correct `YYYYMMDD_HHMMSS` string. If files are already formatted correctly (e.g, capture by `AudioMoth`) this steps can be skipped by removing '2" from the vector \code{steps}. Internally, calls the function \code{\link{split_wave}}.

\bold{3.) If steps = 3 or 'find_events':}
Queries bioacoustics::\code{\link[bioacoustics]{threshold_detection}} to detect events based on signal-to-noise ratios (\code{SNR}). When events are found, a `txt`file based on the file name of the recording is created with labels for reviewing in `Audacity`. Internally, calls the function \code{\link{find_events}}.

\bold{4.) If steps = 4 or ''join_audacity':}
If event detection is based on segmented files (i.e., sub folder 'split' exists), loops through text file containing Audacity labels and merges with respect to the original file (as matched by date and time overlap).

\bold{5.) If steps = 5 or 'extract_events':}
Extract events from (full-length recordings) and writes them to a a new wave file with extension 'extracted.wav'. Additionally, creates file with Audacity labels (extension extracted.txt).

\bold{6.) If steps = 6 or 'merge_events':}
Concatenates files holding extracted events along with their labels to merge the output of a project.
}
