% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/batch_process.R
\name{batch_process}
\alias{batch_process}
\title{Main function to run all steps on a folder of sound files}
\usage{
batch_process(
  path = NULL,
  format = c("WAV", "wav", "mp3", "MP3"),
  recorder = c("AudioMoth", "Olympus LS-3", "Sony PCM-D100"),
  time = c("ctime", "mtime"),
  segment = NULL,
  mono = TRUE,
  downsample = NULL,
  SNR = 8,
  steps = 1:5,
  max.events = 200,
  species = c("Bubo bubo", "Strix aluco", "NocMig", "Glaucidium passerinum", "Shot"),
  rename = TRUE,
  buffer = 1
)
}
\arguments{
\item{path}{path to a set of recordings (all same format and continuous time span)}

\item{format}{format of sound files. Either WAV (default) or mp3}

\item{recorder}{currently three templates to ensure correct handling of times}

\item{time}{Controls, if ctime or mtime is used to compute date_time objects.}

\item{segment}{Null, or numeric value giving segment size for split_wave in seconds.}

\item{mono}{logical. By default, split_wave coerces stereo to mono prio to event detection.}

\item{downsample}{Null or re-sampling factor used in split_wave.}

\item{SNR}{numeric value (db) giving signal to noise ratio in event detection.}

\item{steps}{numeric vector, by default steps 1:5 are executed.}

\item{max.events}{numeric, giving the maximum number of events before a file is skipped. Usually very high detection rates indicate an issue with noise (e.g., wind or rain)}

\item{species}{species used as template to specify parameters in event detection by \code{\link[bioacoustics]{threshold_detection}}. See \code{\link[NocMigR]{td_presets}} for parameters and current implementations.}

\item{rename}{logical. By default renames files using date and time.}

\item{buffer}{buffer in seconds added to before and after the event}
}
\value{
data frame with extracted events
}
\description{
Main function of the package `NocMigR` that allows to analyse a suite of long-term recordings from scratch by executing five distinct steps (see `details` section.).*Under the hood*, this function is calling algorithms of the fabulous R packages \pkg{tuneR}, \pkg{warbleR}, \pkg{seewave} and \pkg{bioacoustics}.
**Important note**:
Especially for large sets of recordings (e.g., `AudioMoth` deployed for a weak, ~ 60 GB data) R can easily run into memory issues. This can surely be tackled by coding functions more efficiently. For now, the best way to handle this issue is to resume the script after it broke (see output in the console and check \code{steps} argument).
}
\details{
By default, five consecutive steps (see \code{steps}) are undertaken to analyse recordings. All recordings of a project (i.e., continuous signal or time-expanded if otherwise) need to be saved to a single directory, specified \code{path}  argument:

1.) Rename audio files to `YYYYMMDD_HHMMSS` format, where the date and time at the onset of the recording are coded by the file name. This steps ensures that all downstream algorithms can compute the correct dates and times of events. If files are already formatted correctly (e.g, capture by `AudioMoth`) this steps can be skipped by removing **"1"** from the vector \code{steps} (e.g., \code{steps = 2:5}). *This step utilises the function \code{\link[NocMigR]{rename_recording}}*

2.) Split audio files in chunks of length \code{segment} to reduce the file size prior to calling event detection algorithms. Within the parent folder (\code{path}) a subfolder "split" is created to dump the files. Each file is named with the correct `YYYYMMDD_HHMMSS` string. If files are already formatted correctly (e.g, capture by `AudioMoth`) this steps can be skipped by removing **"2"** from the vector \code{steps} (e.g., \code{steps = 3:5}).*This step utilises the function \code{\link[NocMigR]{split_wave}}*

3.) Queries \code{\link[bioacoustics]{threshold_detection}} to detect events based on signal-to-noise ratios (\code{SNR}). When events are found, a `txt`file is written with labels for `Audacity`. *This step utilises the function \code{\link[NocMigR]{find_events}}*
4.) Extract events from original recordings and writes them to a WAVE file.
*This step utilises the function \code{\link[NocMigR]{extract_events}}*
#'
}
